## ######################################################################
##            ___   ___    _  _  ___ _____   ___ ___ ___ _____
##           |   \ / _ \  | \| |/ _ \_   _| | __|   \_ _|_   _|
##           | |) | (_) | | .` | (_) || |   | _|| |) | |  | |
##           |___/ \___/  |_|\_|\___/ |_|   |___|___/___| |_|
##            _____ _  _ ___ ___   ___ ___ _    ___ _
##           |_   _| || |_ _/ __| | __|_ _| |  | __| |
##             | | | __ || |\__ \ | _| | || |__| _||_|
##             |_| |_||_|___|___/ |_| |___|____|___(_)
##
## This is a generated file. Please edit the corresponding template
## file (example: templates/gpdb-tpl.yml) and regenerate the pipeline
## using appropriate tool (example: gen_pipeline.py -t prod).
## ----------------------------------------------------------------------
## Generated by gen_pipeline.py at: 2019-09-24 11:52:51.182896
## Template file: gpdb-tpl.yml
## OS Types: ['centos6', 'centos7', 'ubuntu18.04', 'win']
## Test Sections: ['ICW', 'Replication', 'ResourceGroups', 'Interconnect', 'CLI', 'UD', 'Extensions', 'Gpperfmon']
## ======================================================================

## ======================================================================
##   __ _ _ __ ___  _   _ _ __  ___
##  / _` | '__/ _ \| | | | '_ \/ __|
## | (_| | | | (_) | |_| | |_) \__ \
##  \__, |_|  \___/ \__,_| .__/|___/
##  |___/                |_|
## ======================================================================

groups:
- name: all
  jobs:
  - concourse_unit_tests
  - compile_gpdb_centos6
  - compile_gpdb_binary_swap_centos6
  - compile_gpdb_centos7
  - compile_gpdb_ubuntu18.04
  ## --------------------------------------------------------------------
  - icw_gporca_centos6
  - icw_gporca_centos6_gpos_memory
  - icw_planner_centos6
  - icw_planner_ictcp_centos6
  - icw_gporca_centos7
  - icw_planner_centos7
  - icw_gporca_ubuntu18.04
  - icw_planner_ubuntu18.04
  ## --------------------------------------------------------------------
  - interconnect
  ## --------------------------------------------------------------------
  # - gate_resource_groups_start
  # - resource_group_centos6
  # - resource_group_centos7
  ## --------------------------------------------------------------------
  - gate_gpperfmon_start
  - gpperfmon_centos6
  - gpperfmon_centos7
  ## --------------------------------------------------------------------
  - gate_cli_start
  # - gpmovemirrors
  # - gpmovemirrors_ubuntu18
  # - gppkg
  # - gppkg_ubuntu18
  - analyzedb
  - analyzedb_ubuntu18
  - gpinitsystem
  - gpinitsystem_ubuntu18
  - gpstate
  - gpstate_ubuntu18
  - replication_slots
  - replication_slots_ubuntu18
  # - gpactivatestandby
  # - gpactivatestandby_ubuntu18
  - gpinitstandby
  - gpinitstandby_ubuntu18
  # - gpcheckcat
  # - gpcheckcat_ubuntu18
  # - gprecoverseg
  # - gprecoverseg_ubuntu18
  # - gpaddmirrors
  # - gpaddmirrors_ubuntu18
  # - gpconfig
  # - gpconfig_ubuntu18
  # - gpssh-exkeys
  # - gpssh-exkeys_ubuntu18
  # - gpstop
  # - gpstop_ubuntu18
  - check_centos
 ## ---------------------------------------------------------------------
  - icw_extensions_gpcloud_centos6


## ======================================================================

- name: Compile
  jobs:
  - compile_gpdb_centos6
  - compile_gpdb_binary_swap_centos6
  - compile_gpdb_centos7
  - compile_gpdb_ubuntu18.04

## ======================================================================

- name: ICW
  jobs:
  - icw_gporca_centos6
  - icw_gporca_centos6_gpos_memory
  - icw_planner_centos6
  - icw_planner_ictcp_centos6
  - compile_gpdb_centos6
  - icw_gporca_centos7
  - icw_planner_centos7
  - compile_gpdb_centos7
  - icw_gporca_ubuntu18.04
  - icw_planner_ubuntu18.04

## ======================================================================

- name: Extensions
  jobs:
  - icw_extensions_gpcloud_centos6

## ======================================================================

- name: Interconnect
  jobs:
  - compile_gpdb_centos6
  - interconnect

## ======================================================================

# - name: ResourceGroups
#   jobs:
#   - gate_resource_groups_start
#   - resource_group_centos6
#   - compile_gpdb_centos6
#   - resource_group_centos7
#   - compile_gpdb_centos7

## ======================================================================

- name: Gpperfmon
  jobs:
  - gate_gpperfmon_start
  - gpperfmon_centos6
  - compile_gpdb_centos6
  - gpperfmon_centos7
  - compile_gpdb_centos7

## ======================================================================

- name: CLI
  jobs:
  - gate_cli_start
  - compile_gpdb_ubuntu18.04
  # - gpmovemirrors
  # - gpmovemirrors_ubuntu18
  # - gppkg
  # - gppkg_ubuntu18
  - analyzedb
  - analyzedb_ubuntu18
  - gpinitsystem
  - gpinitsystem_ubuntu18
  - gpstate
  - gpstate_ubuntu18
  - replication_slots
  - replication_slots_ubuntu18
  # - gpactivatestandby
  # - gpactivatestandby_ubuntu18
  - gpinitstandby
  - gpinitstandby_ubuntu18
  # - gpcheckcat
  # - gpcheckcat_ubuntu18
  # - gprecoverseg
  # - gprecoverseg_ubuntu18
  # - gpaddmirrors
  # - gpaddmirrors_ubuntu18
  # - gpconfig
  # - gpconfig_ubuntu18
  # - gpssh-exkeys
  # - gpssh-exkeys_ubuntu18
  # - gpstop
  # - gpstop_ubuntu18
  - check_centos
  - compile_gpdb_centos6



## ======================================================================
##                                           _
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  | |_ _   _ _ __   ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \ | __| | | | '_ \ / _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/ | |_| |_| | |_) |  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___|  \__|\__, | .__/ \___||___/
##                                               |___/|_|
## ======================================================================

resource_types:
- name: terarform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource
## ======================================================================
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___||___/
## ======================================================================

resources:
# - name: ccp_src
#   icon: github-circle
#   type: git
#   source:
#     branch: {{ccp-git-branch}}
#     private_key: {{ccp-git-key}}
#     uri: {{ccp-git-remote}}

# - name: terraform
#   icon: terraform
#   type: terraform
#   source:
#     env:
#       AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
#       AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
#       GOOGLE_CREDENTIALS: {{google-service-account-key}}
#     vars:
#       project_id: {{google-project-id}}
#     storage:
#       access_key_id: {{tf-machine-access-key-id}}
#       secret_access_key: {{tf-machine-secret-access-key}}
#       region_name: {{aws-region}}
#       # This is not parameterized, on purpose. All tfstates will go to this spot,
#       # and different teams will place there clusters' tfstate files under different paths
#       bucket: gpdb5-pipeline-dynamic-terraform
#       bucket_path: clusters-google/

# - name: ccp-image
#   icon: docker
#   type: docker-image
#   source:
#     repository: pivotaldata/ccp
#     tag: '7'

- name: icw_gporca_centos6_dump
  icon: google
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/icw_gporca_centos6_dump/dump.sql.xz

- name: gpdb_src
  type: git
  icon: github-circle
  source:
    branch: {{gpdb-git-branch}}
    uri: {{gpdb-git-remote}}
    ignore_paths:
    - gpdb-doc/*
    - README*

- name: bats_core_src
  type: git
  icon: github-circle
  source:
    branch: master
    uri: https://github.com/bats-core/bats-core.git
    tag_filter: v1.1.0

- name: gpdb_src_binary_swap
  type: git
  icon: github-circle
  source:
    branch: {{gpdb-binary-swap-git-tag}}
    uri: {{gpdb-binary-swap-git-remote}}
    ignore_paths:
    - gpdb-doc/*
    - README*


- name: libquicklz-centos6
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos6/libquicklz-(1\.5\.0-.*)-1.el6.x86_64.rpm

- name: libquicklz-devel-centos6
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos6/libquicklz-devel-(1\.5\.0-.*)-1.el6.x86_64.rpm

- name: libsigar-centos6
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos6/sigar-rhel6_x86_64-(1\.6\.5-.*).targz

- name: libquicklz-centos7
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos7/libquicklz-(1\.5\.0-.*)-1.el7.x86_64.rpm

- name: libquicklz-devel-centos7
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos7/libquicklz-devel-(1\.5\.0-.*)-1.el7.x86_64.rpm

- name: libsigar-centos7
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos7/sigar-rhel7_x86_64-(1\.6\.5-.*).targz

- name: libquicklz-ubuntu18.04
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/ubuntu18.04/libquicklz-dev_(1\.5\.0-.*)-1_amd64.deb
- name: python-centos6
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos6/python-(2\.7\.12-.*).tar.gz

- name: python-centos7
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/centos7/python-(2\.7\.12-.*).tar.gz

- name: python-ubuntu18.04
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/ubuntu18.04/python-(2\.7\.12-.*).tar.gz

- name: gpdb6-centos6-build
  icon: docker
  type: docker-image
  source:
    repository: pivotaldata/gpdb6-centos6-build
    tag: latest

- name: gpdb6-centos6-test
  type: docker-image
  icon: docker
  source:
    repository: pivotaldata/gpdb6-centos6-test
    tag: latest
- name: gpdb6-centos7-build
  type: docker-image
  icon: docker
  source:
    repository: pivotaldata/gpdb6-centos7-build
    tag: latest

- name: gpdb6-centos7-test
  type: docker-image
  icon: docker
  source:
    repository: pivotaldata/gpdb6-centos7-test
    tag: latest


- name: gpdb6-ubuntu18.04-build
  type: docker-image
  icon: docker
  source:
    repository: pivotaldata/gpdb6-ubuntu18.04-build
    tag: latest

- name: gpdb6-ubuntu18.04-test
  type: docker-image
  icon: docker
  source:
    repository: pivotaldata/gpdb6-ubuntu18.04-test
    tag: latest

- name: bin_gpdb_centos6
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_centos6/bin_gpdb.tar.gz

- name: bin_gpdb_clients_centos6
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_centos6/bin_gpdb_clients.tar.gz

- name: binary_swap_gpdb_centos6
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/binary_swap_gpdb_centos6/bin_gpdb.tar.gz

- name: bin_gpdb_centos7
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_centos7/bin_gpdb.tar.gz

- name: bin_gpdb_clients_centos7
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_centos7/bin_gpdb_clients.tar.gz

- name: bin_gpdb_ubuntu18.04
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_ubuntu18.04/bin_gpdb.tar.gz

- name: bin_gpdb_clients_ubuntu18.04
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_ubuntu18.04/bin_gpdb_clients.tar.gz

## ======================================================================
##                   _
##   __ _ _ __   ___| |__   ___  _ __ ___
##  / _` | '_ \ / __| '_ \ / _ \| '__/ __|
## | (_| | | | | (__| | | | (_) | |  \__ \
##  \__,_|_| |_|\___|_| |_|\___/|_|  |___/
## ======================================================================

anchors:
- &ccp_default_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  terraform_source: ccp_src/google/

- &ccp_default_vars
  instance_type: n1-standard-1
  PLATFORM: centos6
  ccp_reap_minutes: 60

- &ccp_destroy
  put: terraform
  params:
    action: destroy
    env_name_file: terraform/name
    terraform_source: ccp_src/google/
    vars:
      aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
      aws_ebs_volume_type: standard
  get_params:
    action: destroy

- &ccp_destroy_two_clusters
  do:
  - *ccp_destroy
  - put: terraform2
    params:
      action: destroy
      env_name_file: terraform2/name
      terraform_source: ccp_src/google/
      vars:
        PLATFORM: centos6
        aws_instance-node-instance_type: t2.micro
        cluster_suffix: "-2"
    get_params:
      action: destroy

- &ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-google/
  BUCKET_NAME: {{tf-bucket-name}}
  CLOUD_PROVIDER: google

- &set_failed
  do:
  - task: on_failure_set_failed
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: "7"
      inputs:
        - name: ccp_src
        - name: terraform
      run:
        path: 'ccp_src/google/ccp_failed_test.sh'
      params:
        GOOGLE_CREDENTIALS: {{google-service-account-key}}
        GOOGLE_PROJECT_ID: {{google-project-id}}
        GOOGLE_ZONE: {{google-zone}}
        GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
        AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
        AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
        AWS_DEFAULT_REGION: {{tf-machine-region}}
        BUCKET_PATH: clusters-google/
        BUCKET_NAME: {{tf-bucket-name}}

- &set_failed_two_clusters
  do:
  - *set_failed
  - task: on_failure_set_failed
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: "7"
      inputs:
        - name: ccp_src
        - name: terraform2
      run:
        path: 'ccp_src/google/ccp_failed_test.sh'
      params:
        GOOGLE_CREDENTIALS: {{google-service-account-key}}
        GOOGLE_PROJECT_ID: {{google-project-id}}
        GOOGLE_ZONE: {{google-zone}}
        GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
        AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
        AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
        AWS_DEFAULT_REGION: {{tf-machine-region}}
        BUCKET_PATH: clusters-google/
        BUCKET_NAME: {{tf-bucket-name}}

## ======================================================================
##    _       _
##   (_) ___ | |__  ___
##   | |/ _ \| '_ \/ __|
##   | | (_) | |_) \__ \
##  _/ |\___/|_.__/|___/
## |__/
## ======================================================================

jobs:

## ======================================================================
##  ____  _            _ _              _   _       _ _     _____         _
## |  _ \(_)_ __   ___| (_)_ __   ___  | | | |_ __ (_) |_  |_   _|__  ___| |_ ___
## | |_) | | '_ \ / _ \ | | '_ \ / _ \ | | | | '_ \| | __|   | |/ _ \/ __| __/ __|
## |  __/| | |_) |  __/ | | | | |  __/ | |_| | | | | | |_    | |  __/\__ \ |_\__ \
## |_|   |_| .__/ \___|_|_|_| |_|\___|  \___/|_| |_|_|\__|   |_|\___||___/\__|___/
##         |_|
## ======================================================================

- name: concourse_unit_tests
  plan:
    - in_parallel:
      - get: bats_core_src
      - get: gpdb_src
        trigger: true
      - get: gpdb6-ubuntu18.04-build
    - task: run_unit_tests
      image: gpdb6-ubuntu18.04-build
      config:
        inputs:
          - name: bats_core_src
          - name: gpdb_src
        platform: linux
        run:
          path: bash
          args:
          - -exc
          - |
            python -m unittest discover --verbose -s gpdb_src/concourse/scripts/ -p *_test.py

            if ls gpdb_src/concourse/scripts/*.bats >/dev/null 2>&1; then
              bats_core_src/install.sh /usr/local

              cd gpdb_src/concourse
              bats -t scripts/*.bats
            fi

## ======================================================================
##   ____                      _ _
##  / ___|___  _ __ ___  _ __ (_) | ___
## | |   / _ \| '_ ` _ \| '_ \| | |/ _ \
## | |__| (_) | | | | | | |_) | | |  __/
##  \____\___/|_| |_| |_| .__/|_|_|\___|
##                      |_|
## ======================================================================

- name: compile_gpdb_centos6
  plan:
  - in_parallel:
    - get: gpdb_src
      trigger: ((gpdb_src-trigger-flag))
    - get: gpdb6-centos6-build
    - get: libquicklz-installer
      resource: libquicklz-centos6
    - get: libquicklz-devel-installer
      resource: libquicklz-devel-centos6
    - get: libsigar-installer
      resource: libsigar-centos6
    - get: python-tarball
      resource: python-centos6
    - get: bin_gpdb_centos6
    - get: bin_gpdb_clients_centos6
  # - task: compile_gpdb
  #   file: gpdb_src/concourse/tasks/compile_gpdb.yml
  #   image: gpdb6-centos6-build
  #   params:
  #     CONFIGURE_FLAGS: {{configure_flags_with_extensions}}
  #     TARGET_OS: centos
  #     TARGET_OS_VERSION: 6
  #     BLD_TARGETS: "clients"

- name: compile_gpdb_centos7
  plan:
  - in_parallel:
    - get: gpdb_src
      trigger: ((gpdb_src-trigger-flag))
    - get: gpdb6-centos7-build
    - get: libquicklz-installer
      resource: libquicklz-centos7
    - get: libquicklz-devel-installer
      resource: libquicklz-devel-centos7
    - get: libsigar-installer
      resource: libsigar-centos7
    - get: python-tarball
      resource: python-centos7
    - get: bin_gpdb_centos7
    - get: bin_gpdb_clients_centos7
  # - task: compile_gpdb
  #   image: gpdb6-centos7-build
  #   file: gpdb_src/concourse/tasks/compile_gpdb.yml
  #   params:
  #     CONFIGURE_FLAGS: {{configure_flags_with_extensions}}
  #     TARGET_OS: centos
  #     TARGET_OS_VERSION: 7
  #     BLD_TARGETS: "clients"

- name: compile_gpdb_binary_swap_centos6
  plan:
  # This acts like a cache as this job will only be run once to get a
  # binary to use for our binary swap compatibility tests. Setting a new
  # tag or branch for the gpdb_src_binary_swap resource via set-pipeline
  # will replace the cached binary.
  - in_parallel:
    - get: gpdb_src
      resource: gpdb_src_binary_swap
      trigger: true
    - get: gpdb6-centos6-build
    - get: libquicklz-installer
      resource: libquicklz-centos6
    - get: libquicklz-devel-installer
      resource: libquicklz-devel-centos6
    - get: libsigar-installer
      resource: libsigar-centos6
    - get: python-tarball
      resource: python-centos6
    - get: binary_swap_gpdb_centos6
  # - task: compile_gpdb
  #   file: gpdb_src/concourse/tasks/compile_gpdb.yml
  #   image: gpdb6-centos6-build
  #   params:
  #     CONFIGURE_FLAGS: {{configure_flags_with_extensions}}
  #     TARGET_OS: centos
  #     TARGET_OS_VERSION: 6
  #     BLD_TARGETS: "clients loaders"

- name: compile_gpdb_ubuntu18.04
  plan:
    - in_parallel:
        - get: gpdb_src
          trigger: ((gpdb_src-trigger-flag))
        - get: gpdb6-ubuntu18.04-build
        - get: libquicklz-installer
          resource: libquicklz-ubuntu18.04
        - get: python-tarball
          resource: python-ubuntu18.04
        - get: bin_gpdb_ubuntu18.04
        - get: bin_gpdb_clients_ubuntu18.04
    # - task: compile_gpdb
    #   image: gpdb6-ubuntu18.04-build
    #   file: gpdb_src/concourse/tasks/compile_gpdb.yml
    #   params:
    #     CONFIGURE_FLAGS: {{configure_flags_with_extensions}}
    #     TARGET_OS: ubuntu
    #     TARGET_OS_VERSION: "18.04"
    #     BLD_TARGETS: "clients"

## ======================================================================
##  ___ ______        __
## |_ _/ ___\ \      / /
##  | | |    \ \ /\ / /
##  | | |___  \ V  V /
## |___\____|  \_/\_/
## ======================================================================

- name: icw_planner_centos6
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [compile_gpdb_centos6]
    - get: bin_gpdb
      passed: [compile_gpdb_centos6]
      resource: bin_gpdb_centos6
      trigger: true
    - get: binary_swap_gpdb
      passed: [compile_gpdb_binary_swap_centos6]
      resource: binary_swap_gpdb_centos6
      trigger: true
    - get: gpdb6-centos6-test
  - task: ic_gpdb
    tags: ["icw-workers"]
    timeout: 5h
    privileged: false #true
    file: gpdb_src/concourse/tasks/ic_gpdb_binary_swap.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
      TEST_OS: centos
      TEST_BINARY_SWAP: {{test-binary-swap}}
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_gporca_centos6
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [compile_gpdb_centos6]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [compile_gpdb_centos6]
      trigger: true
    - get: gpdb6-centos6-test
  - task: ic_gpdb
    tags: ["icw-workers"]
    timeout: 5h
    privileged: false #true
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}
      DUMP_DB: "true"
  - put: icw_gporca_centos6_dump
    params:
      file: sqldump/dump.sql.xz

- name: icw_gporca_centos6_gpos_memory
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [compile_gpdb_centos6]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [compile_gpdb_centos6]
      trigger: true
    - get: gpdb6-centos6-test
  - task: ic_gpdb
    tags: ["icw-workers"]
    timeout: 5h
    privileged: false #true
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
      BLDWRAP_POSTGRES_CONF_ADDONS: optimizer_use_gpdb_allocators=on
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_ictcp_centos6
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [compile_gpdb_centos6]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [compile_gpdb_centos6]
      trigger: true
    - get: gpdb6-centos6-test
  - task: ic_gpdb
    tags: ["icw-workers"]
    timeout: 5h
    privileged: false #true
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=tcp -c optimizer=off' installcheck-world
      TEST_OS: centos

- name: icw_gporca_centos7
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [compile_gpdb_centos7]
    - get: bin_gpdb
      resource: bin_gpdb_centos7
      passed: [compile_gpdb_centos7]
      trigger: true
    - get: gpdb6-centos7-test
  - task: ic_gpdb
    tags: ["icw-workers"]
    timeout: 5h
    privileged: false #true
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_centos7
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [compile_gpdb_centos7]
    - get: bin_gpdb
      passed: [compile_gpdb_centos7]
      resource: bin_gpdb_centos7
      trigger: true
    - get: gpdb6-centos7-test
  - task: ic_gpdb
    tags: ["icw-workers"]
    timeout: 5h
    privileged: false #true
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos7-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_gporca_ubuntu18.04
  plan:
    - in_parallel:
        - get: gpdb_src
          passed: [compile_gpdb_ubuntu18.04]
        - get: bin_gpdb
          resource: bin_gpdb_ubuntu18.04
          passed: [compile_gpdb_ubuntu18.04]
          trigger: true
        - get: gpdb6-ubuntu18.04-test
    - task: ic_gpdb
      timeout: 5h
      tags: ["icw-workers"]
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-ubuntu18.04-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on' installcheck-world
        TEST_OS: ubuntu
        CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_ubuntu18.04
  plan:
    - in_parallel:
        - get: gpdb_src
          passed: [compile_gpdb_ubuntu18.04]
        - get: bin_gpdb
          passed: [compile_gpdb_ubuntu18.04]
          resource: bin_gpdb_ubuntu18.04
          trigger: true
        - get: gpdb6-ubuntu18.04-test
    - task: ic_gpdb
      tags: ["icw-workers"]
      timeout: 5h
      privileged: false #true
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb6-ubuntu18.04-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off' installcheck-world
        TEST_OS: ubuntu
        CONFIGURE_FLAGS: {{configure_flags}}

## ======================================================================
##  ___ _   _ _____ _____ ____   ____ ___  _   _ _   _ _____ ____ _____
## |_ _| \ | |_   _| ____|  _ \ / ___/ _ \| \ | | \ | | ____/ ___|_   _|
##  | ||  \| | | | |  _| | |_) | |  | | | |  \| |  \| |  _|| |     | |
##  | || |\  | | | | |___|  _ <| |__| |_| | |\  | |\  | |__| |___  | |
## |___|_| \_| |_| |_____|_| \_\\____\___/|_| \_|_| \_|_____\____| |_|
## ======================================================================
- name: interconnect
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [compile_gpdb_centos6]
    - get: bin_gpdb
      passed: [compile_gpdb_centos6]
      resource: bin_gpdb_centos6
      trigger: true
    - get: gpdb6-centos6-test
  - task: ic_gpdb
    timeout: 5h
    tags: ["icw-workers"]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb6-centos6-test
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off'
        BUILD_TYPE=((rc-build-type)) -C src/test/regress installcheck-icudp
      TEST_OS: centos

## ======================================================================
##  ____                                     ____
## |  _ \ ___  ___  ___  _   _ _ __ ___ ___ / ___|_ __ ___  _   _ _ __  ___
## | |_) / _ \/ __|/ _ \| | | | '__/ __/ _ \ |  _| '__/ _ \| | | | '_ \/ __|
## |  _ <  __/\__ \ (_) | |_| | | | (_|  __/ |_| | | | (_) | |_| | |_) \__ \
## |_| \_\___||___/\___/ \__,_|_|  \___\___|\____|_|  \___/ \__,_| .__/|___/
##                                                               |_|
## ======================================================================

# - name: gate_resource_groups_start
#   plan:
#   - in_parallel:
#     - get: gpdb_src
#       passed:
#       - compile_gpdb_centos6
#       - compile_gpdb_centos7
#       trigger: true
#     - get: bin_gpdb_centos6
#       passed:
#       - compile_gpdb_centos6
#     - get: bin_gpdb_centos7
#       passed:
#       - compile_gpdb_centos7
#     - get: binary_swap_gpdb
#       passed: [compile_gpdb_binary_swap_centos6]
#       resource: binary_swap_gpdb_centos6
#       trigger: true

# - name: resource_group_centos6
#   plan:
#   - in_parallel:
#     - get: gpdb_src
#       passed: [gate_resource_groups_start]
#     - get: gpdb_binary
#       resource: bin_gpdb_centos6
#       passed: [gate_resource_groups_start]
#       trigger: true
#     - get: ccp_src
#     - get: ccp-image
#     - get: binary_swap_gpdb
#       passed: [gate_resource_groups_start]
#       resource: binary_swap_gpdb_centos6
#       trigger: true
#   - put: terraform
#     params:
#       <<: *ccp_default_params
#       vars:
#         <<: *ccp_default_vars
#         instance_type: n1-standard-2
#   - task: gen_cluster
#     file: ccp_src/ci/tasks/gen_cluster.yml
#     params:
#       <<: *ccp_gen_cluster_default_params
#   - task: gpinitsystem
#     file: ccp_src/ci/tasks/gpinitsystem.yml
#   - task: run_tests
#     file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
#     image: ccp-image
#     params:
#       TEST_OS: centos6
#     on_success:
#       <<: *ccp_destroy
#   ensure:
#     <<: *set_failed

# - name: resource_group_centos7
#   plan:
#   - in_parallel:
#     - get: gpdb_src
#       passed: [gate_resource_groups_start]
#     - get: gpdb_binary
#       resource: bin_gpdb_centos7
#       passed: [gate_resource_groups_start]
#       trigger: true
#     - get: ccp_src
#     - get: ccp-image
#     - get: binary_swap_gpdb
#       passed: [gate_resource_groups_start]
#       resource: binary_swap_gpdb_centos6
#       trigger: true
#   - put: terraform
#     params:
#       <<: *ccp_default_params
#       vars:
#         <<: *ccp_default_vars
#         PLATFORM: centos7
#         instance_type: n1-standard-2
#   - task: gen_cluster
#     file: ccp_src/ci/tasks/gen_cluster.yml
#     params:
#       <<: *ccp_gen_cluster_default_params
#       PLATFORM: centos7
#   - task: gpinitsystem
#     file: ccp_src/ci/tasks/gpinitsystem.yml
#   - task: run_tests
#     file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
#     image: ccp-image
#     params:
#       TEST_OS: centos7
#     on_success:
#       <<: *ccp_destroy
#   ensure:
#     <<: *set_failed



## ======================================================================
##                               __
##   __ _ _ __  _ __   ___ _ __ / _|_ __ ___   ___  _ __
##  / _` | '_ \| '_ \ / _ \ '__| |_| '_ ` _ \ / _ \| '_ \
## | (_| | |_) | |_) |  __/ |  |  _| | | | | | (_) | | | |
##  \__, | .__/| .__/ \___|_|  |_| |_| |_| |_|\___/|_| |_|
##  |___/|_|   |_|
## ======================================================================

- name: gate_gpperfmon_start
  plan:
  - in_parallel:
    - get: gpdb_src
      passed:
      - compile_gpdb_centos6
      - compile_gpdb_centos7
      trigger: true
    - get: bin_gpdb_centos6
      passed:
      - compile_gpdb_centos6
    - get: bin_gpdb_centos7
      passed:
      - compile_gpdb_centos7
    - get: binary_swap_gpdb
      passed: [compile_gpdb_binary_swap_centos6]
      resource: binary_swap_gpdb_centos6
      trigger: true

- name: gpperfmon_centos6
  plan:
  - in_parallel:
    - get: gpdb_src
      params:
        submodules:
        - gpMgmt/bin/pythonSrc/ext
      passed: [gate_gpperfmon_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_gpperfmon_start]
      trigger: true
    - get: gpdb6-centos6-test
    - get: gpdb6-centos7-test
  - task: gpperfmon
    file: gpdb_src/concourse/tasks/behave_gpdb.yml
    image: gpdb6-centos6-test
    params:
      BEHAVE_TAGS: gpperfmon
      TEST_NAME: gpperfmon_centos6
  # - task: publish_coverage
  #   image: gpdb6-centos7-test
  #   config:
  #     platform: linux
  #     inputs:
  #       - name: gpdb_src
  #       - name: coverage
  #     run:
  #       path: gpdb_src/concourse/scripts/gsutil_sync
  #       args: [ "./coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
  #     params:
  #       JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpperfmon_centos7
  plan:
  - in_parallel:
    - get: gpdb_src
      params:
        submodules:
        - gpMgmt/bin/pythonSrc/ext
      passed: [gate_gpperfmon_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos7
      passed: [gate_gpperfmon_start]
      trigger: true
    - get: gpdb6-centos7-test
  - task: gpperfmon
    file: gpdb_src/concourse/tasks/behave_gpdb.yml
    image: gpdb6-centos7-test
    params:
      BEHAVE_TAGS: gpperfmon
      TEST_NAME: gpperfmon_centos7
  # - task: publish_coverage
  #   image: gpdb6-centos7-test
  #   config:
  #     platform: linux
  #     inputs:
  #       - name: gpdb_src
  #       - name: coverage
  #     run:
  #       path: gpdb_src/concourse/scripts/gsutil_sync
  #       args: [ "./coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
  #     params:
  #       JSON_KEY: ((concourse-gcs-resources-service-account-key))

## ======================================================================
##   ____ _     ___
##  / ___| |   |_ _|
## | |   | |    | |
## | |___| |___ | |
##  \____|_____|___|
## ======================================================================

- name: gate_cli_start
  plan:
  - in_parallel:
    - get: gpdb_src
      passed:
      - compile_gpdb_centos6
      trigger: true
    - get: bin_gpdb_centos6
      passed:
      - compile_gpdb_centos6

- name: check_centos
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [gate_cli_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_cli_start]
      trigger: true
    - get: gpdb6-centos6-test
    - get: gpdb6-centos7-test
  - task: check_centos
    tags: ["cli-workers"]
    file: gpdb_src/concourse/tasks/gpMgmt_check_gpdb.yml
    image: gpdb6-centos6-test
    params:
      TEST_OS: centos
      TEST_NAME: gpmgmt_unit_tests
  # - task: publish_coverage
  #   image: gpdb6-centos7-test
  #   config:
  #     platform: linux
  #     inputs:
  #       - name: gpdb_src
  #       - name: coverage
  #     run:
  #       path: gpdb_src/concourse/scripts/gsutil_sync
  #       args: [ "./coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
  #     params:
  #       JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gpmovemirrors
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [gate_cli_start]
#       - get: gpdb6-centos6-test
#       - get: gpdb6-centos7-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - get: ccp_src
#         - get: ccp-image
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               number_of_nodes: 4
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpmovemirrors_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: ccp-image
#           params:
#             BEHAVE_FLAGS: --tags=gpmovemirrors --tags=concourse_cluster
#             TEST_NAME: gpmovemirrors
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#           output_mapping:
#             coverage: ccp-coverage
#         - task: publish_ccp_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: ccp-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))
#       - do:
#         - get: bin_gpdb
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - task: gpmovemirrors_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-centos6-test
#           params:
#             BEHAVE_FLAGS: --tags=gpmovemirrors --tags=~concourse_cluster,demo_cluster
#             TEST_NAME: gpmovemirrors
#           output_mapping:
#             coverage: demo-coverage
#         - task: publish_demo_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: demo-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gpmovemirrors_ubuntu18
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [compile_gpdb_ubuntu18.04]
#       - get: gpdb6-ubuntu18.04-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - get: ccp_src
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               PLATFORM: ubuntu18.04
#               number_of_nodes: 4
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#             PLATFORM: ubuntu18.04
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpmovemirrors_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: gpdb6-ubuntu18.04-test
#           params:
#             BEHAVE_FLAGS: --tags=gpmovemirrors --tags=concourse_cluster
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#       - do:
#         - get: bin_gpdb_ubuntu18.04
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - task: gpmovemirrors_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-ubuntu18.04-test
#           input_mapping:
#             bin_gpdb: bin_gpdb_ubuntu18.04
#           params:
#             BEHAVE_FLAGS: --tags=gpmovemirrors --tags=~concourse_cluster,demo_cluster

# - name: gppkg
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [gate_cli_start]
#       - get: gpdb6-centos6-test
#       - get: gpdb6-centos7-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - get: ccp_src
#         - get: ccp-image
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gppkg_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: ccp-image
#           params:
#             BEHAVE_FLAGS: --tags=gppkg --tags=concourse_cluster
#             TEST_NAME: gppkg
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#           output_mapping:
#             coverage: ccp-coverage
#         - task: publish_ccp_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: ccp-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))
#       - do:
#         - get: bin_gpdb
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - task: gppkg_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-centos6-test
#           params:
#             BEHAVE_FLAGS: --tags=gppkg --tags=~concourse_cluster,demo_cluster
#             TEST_NAME: gppkg
#           output_mapping:
#             coverage: demo-coverage
#         - task: publish_demo_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: demo-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gppkg_ubuntu18
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [compile_gpdb_ubuntu18.04]
#       - get: gpdb6-ubuntu18.04-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - get: ccp_src
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               PLATFORM: ubuntu18.04
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#             PLATFORM: ubuntu18.04
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gppkg_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: gpdb6-ubuntu18.04-test
#           params:
#             BEHAVE_FLAGS: --tags=gppkg --tags=concourse_cluster
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#       - do:
#         - get: bin_gpdb_ubuntu18.04
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - task: gppkg_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-ubuntu18.04-test
#           input_mapping:
#             bin_gpdb: bin_gpdb_ubuntu18.04
#           params:
#             BEHAVE_FLAGS: --tags=gppkg --tags=~concourse_cluster,demo_cluster

- name: analyzedb
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb6-centos6-test
      - get: gpdb6-centos7-test
    - in_parallel:
      - do:
        - get: bin_gpdb
          resource: bin_gpdb_centos6
          passed: [gate_cli_start]
          trigger: true
        - task: analyzedb_demo_cluster_tests
          tags: ["cli-workers"]
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-centos6-test
          params:
            BEHAVE_FLAGS: --tags=analyzedb --tags=~concourse_cluster,demo_cluster
            TEST_NAME: analyzedb
          output_mapping:
            coverage: demo-coverage
        # - task: publish_demo_coverage
        #   image: gpdb6-centos7-test
        #   config:
        #     platform: linux
        #     inputs:
        #       - name: gpdb_src
        #       - name: demo-coverage
        #     run:
        #       path: gpdb_src/concourse/scripts/gsutil_sync
        #       args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
        #     params:
        #       JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: analyzedb_ubuntu18
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [compile_gpdb_ubuntu18.04]
      - get: gpdb6-ubuntu18.04-test
    - in_parallel:
      - do:
        - get: bin_gpdb_ubuntu18.04
          resource: bin_gpdb_ubuntu18.04
          passed: [compile_gpdb_ubuntu18.04]
          trigger: true
        - task: analyzedb_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-ubuntu18.04-test
          input_mapping:
            bin_gpdb: bin_gpdb_ubuntu18.04
          params:
            BEHAVE_FLAGS: --tags=analyzedb --tags=~concourse_cluster,demo_cluster

- name: gpinitsystem
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb6-centos6-test
      - get: gpdb6-centos7-test
    - in_parallel:
      - do:
        - get: bin_gpdb
          resource: bin_gpdb_centos6
          passed: [gate_cli_start]
          trigger: true
        - task: gpinitsystem_demo_cluster_tests
          tags: ["cli-workers"]
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-centos6-test
          params:
            BEHAVE_FLAGS: --tags=gpinitsystem --tags=~concourse_cluster,demo_cluster
            TEST_NAME: gpinitsystem
          output_mapping:
            coverage: demo-coverage
        # - task: publish_demo_coverage
        #   image: gpdb6-centos7-test
        #   config:
        #     platform: linux
        #     inputs:
        #       - name: gpdb_src
        #       - name: demo-coverage
        #     run:
        #       path: gpdb_src/concourse/scripts/gsutil_sync
        #       args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
        #     params:
        #       JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpinitsystem_ubuntu18
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [compile_gpdb_ubuntu18.04]
      - get: gpdb6-ubuntu18.04-test
    - in_parallel:
      - do:
        - get: bin_gpdb_ubuntu18.04
          resource: bin_gpdb_ubuntu18.04
          passed: [compile_gpdb_ubuntu18.04]
          trigger: true
        - task: gpinitsystem_demo_cluster_tests
          tags: ["cli-workers"]
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-ubuntu18.04-test
          input_mapping:
            bin_gpdb: bin_gpdb_ubuntu18.04
          params:
            BEHAVE_FLAGS: --tags=gpinitsystem --tags=~concourse_cluster,demo_cluster

- name: gpstate
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb6-centos6-test
      - get: gpdb6-centos7-test
    - in_parallel:
      - do:
        - get: bin_gpdb
          resource: bin_gpdb_centos6
          passed: [gate_cli_start]
          trigger: true
        - task: gpstate_demo_cluster_tests
          tags: ["cli-workers"]
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-centos6-test
          params:
            BEHAVE_FLAGS: --tags=gpstate --tags=~concourse_cluster,demo_cluster
            TEST_NAME: gpstate
          output_mapping:
            coverage: demo-coverage
        # - task: publish_demo_coverage
        #   image: gpdb6-centos7-test
        #   config:
        #     platform: linux
        #     inputs:
        #       - name: gpdb_src
        #       - name: demo-coverage
        #     run:
        #       path: gpdb_src/concourse/scripts/gsutil_sync
        #       args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
        #     params:
        #       JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpstate_ubuntu18
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [compile_gpdb_ubuntu18.04]
      - get: gpdb6-ubuntu18.04-test
    - in_parallel:
      - do:
        - get: bin_gpdb_ubuntu18.04
          resource: bin_gpdb_ubuntu18.04
          passed: [compile_gpdb_ubuntu18.04]
          trigger: true
        - task: gpstate_demo_cluster_tests
          tags: ["cli-workers"]
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-ubuntu18.04-test
          input_mapping:
            bin_gpdb: bin_gpdb_ubuntu18.04
          params:
            BEHAVE_FLAGS: --tags=gpstate --tags=~concourse_cluster,demo_cluster

- name: replication_slots
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb6-centos6-test
      - get: gpdb6-centos7-test
    - in_parallel:
      - do:
        - get: bin_gpdb
          resource: bin_gpdb_centos6
          passed: [gate_cli_start]
          trigger: true
        - task: replication_slots_demo_cluster_tests
          tags: ["cli-workers"]
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-centos6-test
          params:
            BEHAVE_FLAGS: --tags=replication_slots --tags=~concourse_cluster,demo_cluster
            TEST_NAME: replication_slots
          output_mapping:
            coverage: demo-coverage
        # - task: publish_demo_coverage
        #   image: gpdb6-centos7-test
        #   config:
        #     platform: linux
        #     inputs:
        #       - name: gpdb_src
        #       - name: demo-coverage
        #     run:
        #       path: gpdb_src/concourse/scripts/gsutil_sync
        #       args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
        #     params:
        #       JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: replication_slots_ubuntu18
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [compile_gpdb_ubuntu18.04]
      - get: gpdb6-ubuntu18.04-test
    - in_parallel:
      - do:
        - get: bin_gpdb_ubuntu18.04
          resource: bin_gpdb_ubuntu18.04
          passed: [compile_gpdb_ubuntu18.04]
          trigger: true
        - task: replication_slots_demo_cluster_tests
          tags: ["cli-workers"]
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-ubuntu18.04-test
          input_mapping:
            bin_gpdb: bin_gpdb_ubuntu18.04
          params:
            BEHAVE_FLAGS: --tags=replication_slots --tags=~concourse_cluster,demo_cluster

# - name: gpactivatestandby
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [gate_cli_start]
#       - get: gpdb6-centos6-test
#       - get: gpdb6-centos7-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - get: ccp_src
#         - get: ccp-image
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpactivatestandby_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: ccp-image
#           params:
#             BEHAVE_FLAGS: --tags=gpactivatestandby --tags=concourse_cluster
#             TEST_NAME: gpactivatestandby
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#           output_mapping:
#             coverage: ccp-coverage
#         - task: publish_ccp_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: ccp-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))
#       - do:
#         - get: bin_gpdb
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - task: gpactivatestandby_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-centos6-test
#           params:
#             BEHAVE_FLAGS: --tags=gpactivatestandby --tags=~concourse_cluster,demo_cluster
#             TEST_NAME: gpactivatestandby
#           output_mapping:
#             coverage: demo-coverage
#         - task: publish_demo_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: demo-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gpactivatestandby_ubuntu18
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [compile_gpdb_ubuntu18.04]
#       - get: gpdb6-ubuntu18.04-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - get: ccp_src
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               PLATFORM: ubuntu18.04
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#             PLATFORM: ubuntu18.04
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpactivatestandby_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: gpdb6-ubuntu18.04-test
#           params:
#             BEHAVE_FLAGS: --tags=gpactivatestandby --tags=concourse_cluster
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#       - do:
#         - get: bin_gpdb_ubuntu18.04
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - task: gpactivatestandby_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-ubuntu18.04-test
#           input_mapping:
#             bin_gpdb: bin_gpdb_ubuntu18.04
#           params:
#             BEHAVE_FLAGS: --tags=gpactivatestandby --tags=~concourse_cluster,demo_cluster

- name: gpinitstandby
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb6-centos6-test
      - get: gpdb6-centos7-test
    - in_parallel:
      - do:
        - get: bin_gpdb
          resource: bin_gpdb_centos6
          passed: [gate_cli_start]
          trigger: true
        - task: gpinitstandby_demo_cluster_tests
          tags: ["cli-workers"]
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-centos6-test
          params:
            BEHAVE_FLAGS: --tags=gpinitstandby --tags=~concourse_cluster,demo_cluster
            TEST_NAME: gpinitstandby
          output_mapping:
            coverage: demo-coverage
        # - task: publish_demo_coverage
        #   image: gpdb6-centos7-test
        #   config:
        #     platform: linux
        #     inputs:
        #       - name: gpdb_src
        #       - name: demo-coverage
        #     run:
        #       path: gpdb_src/concourse/scripts/gsutil_sync
        #       args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
        #     params:
        #       JSON_KEY: ((concourse-gcs-resources-service-account-key))

- name: gpinitstandby_ubuntu18
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [compile_gpdb_ubuntu18.04]
      - get: gpdb6-ubuntu18.04-test
    - in_parallel:
      - do:
        - get: bin_gpdb_ubuntu18.04
          resource: bin_gpdb_ubuntu18.04
          passed: [compile_gpdb_ubuntu18.04]
          trigger: true
        - task: gpinitstandby_demo_cluster_tests
          tags: ["cli-workers"]
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb6-ubuntu18.04-test
          input_mapping:
            bin_gpdb: bin_gpdb_ubuntu18.04
          params:
            BEHAVE_FLAGS: --tags=gpinitstandby --tags=~concourse_cluster,demo_cluster

# - name: gpcheckcat
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [gate_cli_start]
#       - get: gpdb6-centos6-test
#       - get: gpdb6-centos7-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - get: ccp_src
#         - get: ccp-image
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpcheckcat_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: ccp-image
#           params:
#             BEHAVE_FLAGS: --tags=gpcheckcat --tags=concourse_cluster
#             TEST_NAME: gpcheckcat
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#           output_mapping:
#             coverage: ccp-coverage
#         - task: publish_ccp_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: ccp-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))
#       - do:
#         - get: bin_gpdb
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - task: gpcheckcat_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-centos6-test
#           params:
#             BEHAVE_FLAGS: --tags=gpcheckcat --tags=~concourse_cluster,demo_cluster
#             TEST_NAME: gpcheckcat
#           output_mapping:
#             coverage: demo-coverage
#         - task: publish_demo_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: demo-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gpcheckcat_ubuntu18
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [compile_gpdb_ubuntu18.04]
#       - get: gpdb6-ubuntu18.04-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - get: ccp_src
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               PLATFORM: ubuntu18.04
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#             PLATFORM: ubuntu18.04
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpcheckcat_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: gpdb6-ubuntu18.04-test
#           params:
#             BEHAVE_FLAGS: --tags=gpcheckcat --tags=concourse_cluster
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#       - do:
#         - get: bin_gpdb_ubuntu18.04
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - task: gpcheckcat_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-ubuntu18.04-test
#           input_mapping:
#             bin_gpdb: bin_gpdb_ubuntu18.04
#           params:
#             BEHAVE_FLAGS: --tags=gpcheckcat --tags=~concourse_cluster,demo_cluster

# - name: gprecoverseg
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [gate_cli_start]
#       - get: gpdb6-centos6-test
#       - get: gpdb6-centos7-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - get: ccp_src
#         - get: ccp-image
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gprecoverseg_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: ccp-image
#           params:
#             BEHAVE_FLAGS: --tags=gprecoverseg --tags=concourse_cluster
#             TEST_NAME: gprecoverseg
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#           output_mapping:
#             coverage: ccp-coverage
#         - task: publish_ccp_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: ccp-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))
#       - do:
#         - get: bin_gpdb
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - task: gprecoverseg_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-centos6-test
#           params:
#             BEHAVE_FLAGS: --tags=gprecoverseg --tags=~concourse_cluster,demo_cluster
#             TEST_NAME: gprecoverseg
#           output_mapping:
#             coverage: demo-coverage
#         - task: publish_demo_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: demo-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gprecoverseg_ubuntu18
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [compile_gpdb_ubuntu18.04]
#       - get: gpdb6-ubuntu18.04-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - get: ccp_src
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               PLATFORM: ubuntu18.04
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#             PLATFORM: ubuntu18.04
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gprecoverseg_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: gpdb6-ubuntu18.04-test
#           params:
#             BEHAVE_FLAGS: --tags=gprecoverseg --tags=concourse_cluster
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#       - do:
#         - get: bin_gpdb_ubuntu18.04
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - task: gprecoverseg_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-ubuntu18.04-test
#           input_mapping:
#             bin_gpdb: bin_gpdb_ubuntu18.04
#           params:
#             BEHAVE_FLAGS: --tags=gprecoverseg --tags=~concourse_cluster,demo_cluster

# - name: gpaddmirrors
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [gate_cli_start]
#       - get: gpdb6-centos6-test
#       - get: gpdb6-centos7-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - get: ccp_src
#         - get: ccp-image
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               number_of_nodes: 4
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpaddmirrors_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: ccp-image
#           params:
#             BEHAVE_FLAGS: --tags=gpaddmirrors --tags=concourse_cluster
#             TEST_NAME: gpaddmirrors
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#           output_mapping:
#             coverage: ccp-coverage
#         - task: publish_ccp_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: ccp-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))
#       - do:
#         - get: bin_gpdb
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - task: gpaddmirrors_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-centos6-test
#           params:
#             BEHAVE_FLAGS: --tags=gpaddmirrors --tags=~concourse_cluster,demo_cluster
#             TEST_NAME: gpaddmirrors
#           output_mapping:
#             coverage: demo-coverage
#         - task: publish_demo_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: demo-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gpaddmirrors_ubuntu18
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [compile_gpdb_ubuntu18.04]
#       - get: gpdb6-ubuntu18.04-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - get: ccp_src
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               PLATFORM: ubuntu18.04
#               number_of_nodes: 4
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#             PLATFORM: ubuntu18.04
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpaddmirrors_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: gpdb6-ubuntu18.04-test
#           params:
#             BEHAVE_FLAGS: --tags=gpaddmirrors --tags=concourse_cluster
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#       - do:
#         - get: bin_gpdb_ubuntu18.04
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - task: gpaddmirrors_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-ubuntu18.04-test
#           input_mapping:
#             bin_gpdb: bin_gpdb_ubuntu18.04
#           params:
#             BEHAVE_FLAGS: --tags=gpaddmirrors --tags=~concourse_cluster,demo_cluster

# - name: gpconfig
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [gate_cli_start]
#       - get: gpdb6-centos6-test
#       - get: gpdb6-centos7-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - get: ccp_src
#         - get: ccp-image
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpconfig_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: ccp-image
#           params:
#             BEHAVE_FLAGS: --tags=gpconfig --tags=concourse_cluster
#             TEST_NAME: gpconfig
#             LC_CTYPE: en_US.UTF-8
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#           output_mapping:
#             coverage: ccp-coverage
#         - task: publish_ccp_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: ccp-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))
#       - do:
#         - get: bin_gpdb
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - task: gpconfig_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-centos6-test
#           params:
#             BEHAVE_FLAGS: --tags=gpconfig --tags=~concourse_cluster,demo_cluster
#             TEST_NAME: gpconfig
#             LC_CTYPE: en_US.UTF-8
#           output_mapping:
#             coverage: demo-coverage
#         - task: publish_demo_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: demo-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gpconfig_ubuntu18
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [compile_gpdb_ubuntu18.04]
#       - get: gpdb6-ubuntu18.04-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - get: ccp_src
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               PLATFORM: ubuntu18.04
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#             PLATFORM: ubuntu18.04
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpconfig_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: gpdb6-ubuntu18.04-test
#           params:
#             BEHAVE_FLAGS: --tags=gpconfig --tags=concourse_cluster
#             LC_CTYPE: en_US.UTF-8
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#       - do:
#         - get: bin_gpdb_ubuntu18.04
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - task: gpconfig_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-ubuntu18.04-test
#           input_mapping:
#             bin_gpdb: bin_gpdb_ubuntu18.04
#           params:
#             BEHAVE_FLAGS: --tags=gpconfig --tags=~concourse_cluster,demo_cluster
#             LC_CTYPE: en_US.UTF-8

# - name: gpssh-exkeys
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [gate_cli_start]
#       - get: gpdb6-centos6-test
#       - get: gpdb6-centos7-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - get: ccp_src
#         - get: ccp-image
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               number_of_nodes: 4
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpssh-exkeys_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: ccp-image
#           params:
#             BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=concourse_cluster
#             TEST_NAME: gpssh-exkeys
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#           output_mapping:
#             coverage: ccp-coverage
#         - task: publish_ccp_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: ccp-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))
#       - do:
#         - get: bin_gpdb
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - task: gpssh-exkeys_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-centos6-test
#           params:
#             BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=~concourse_cluster,demo_cluster
#             TEST_NAME: gpssh-exkeys
#           output_mapping:
#             coverage: demo-coverage
#         - task: publish_demo_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: demo-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gpssh-exkeys_ubuntu18
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [compile_gpdb_ubuntu18.04]
#       - get: gpdb6-ubuntu18.04-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - get: ccp_src
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               PLATFORM: ubuntu18.04
#               number_of_nodes: 4
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#             PLATFORM: ubuntu18.04
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpssh-exkeys_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: gpdb6-ubuntu18.04-test
#           params:
#             BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=concourse_cluster
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#       - do:
#         - get: bin_gpdb_ubuntu18.04
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - task: gpssh-exkeys_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-ubuntu18.04-test
#           input_mapping:
#             bin_gpdb: bin_gpdb_ubuntu18.04
#           params:
#             BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=~concourse_cluster,demo_cluster

# - name: gpstop
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [gate_cli_start]
#       - get: gpdb6-centos6-test
#       - get: gpdb6-centos7-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - get: ccp_src
#         - get: ccp-image
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpstop_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: ccp-image
#           params:
#             BEHAVE_FLAGS: --tags=gpstop --tags=concourse_cluster
#             TEST_NAME: gpstop
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#           output_mapping:
#             coverage: ccp-coverage
#         - task: publish_ccp_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: ccp-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./ccp-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))
#       - do:
#         - get: bin_gpdb
#           resource: bin_gpdb_centos6
#           passed: [gate_cli_start]
#           trigger: true
#         - task: gpstop_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-centos6-test
#           params:
#             BEHAVE_FLAGS: --tags=gpstop --tags=~concourse_cluster,demo_cluster
#             TEST_NAME: gpstop
#           output_mapping:
#             coverage: demo-coverage
#         - task: publish_demo_coverage
#           image: gpdb6-centos7-test
#           config:
#             platform: linux
#             inputs:
#               - name: gpdb_src
#               - name: demo-coverage
#             run:
#               path: gpdb_src/concourse/scripts/gsutil_sync
#               args: [ "./demo-coverage/", "gs://((coverage-bucket-name))/((pipeline-name))/" ]
#             params:
#               JSON_KEY: ((concourse-gcs-resources-service-account-key))

# - name: gpstop_ubuntu18
#   plan:
#     - in_parallel:
#       - get: gpdb_src
#         params:
#           submodules:
#             - gpMgmt/bin/pythonSrc/ext
#         passed: [compile_gpdb_ubuntu18.04]
#       - get: gpdb6-ubuntu18.04-test
#     - in_parallel:
#       - do:
#         - get: gpdb_binary
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - get: ccp_src
#         - put: terraform
#           params:
#             <<: *ccp_default_params
#             vars:
#               <<: *ccp_default_vars
#               instance_type: n1-standard-2
#               PLATFORM: ubuntu18.04
#         - task: gen_cluster
#           file: ccp_src/ci/tasks/gen_cluster.yml
#           params:
#             <<: *ccp_gen_cluster_default_params
#             PLATFORM: ubuntu18.04
#         - task: gpinitsystem
#           file: ccp_src/ci/tasks/gpinitsystem.yml
#         - task: gpstop_concourse_cluster_tests
#           file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
#           image: gpdb6-ubuntu18.04-test
#           params:
#             BEHAVE_FLAGS: --tags=gpstop --tags=concourse_cluster
#           on_success:
#             <<: *ccp_destroy
#           ensure:
#             <<: *set_failed
#       - do:
#         - get: bin_gpdb_ubuntu18.04
#           resource: bin_gpdb_ubuntu18.04
#           passed: [compile_gpdb_ubuntu18.04]
#           trigger: true
#         - task: gpstop_demo_cluster_tests
#           file: gpdb_src/concourse/tasks/behave_gpdb.yml
#           image: gpdb6-ubuntu18.04-test
#           input_mapping:
#             bin_gpdb: bin_gpdb_ubuntu18.04
#           params:
#             BEHAVE_FLAGS: --tags=gpstop --tags=~concourse_cluster,demo_cluster

#  # end CLI test_sections

## ======================================================================
##    __      _                 _
##   /__\_  _| |_ ___ _ __  ___(_) ___  _ __  ___
##  /_\ \ \/ / __/ _ \ '_ \/ __| |/ _ \| '_ \/ __|
## //__  >  <| ||  __/ | | \__ \ | (_) | | | \__ \
## \__/ /_/\_\\__\___|_| |_|___/_|\___/|_| |_|___/
## ======================================================================

- name: icw_extensions_gpcloud_centos6
  plan:
  - in_parallel:
    - get: gpdb_src
      passed: [compile_gpdb_centos6]
      trigger: true
    - get: bin_gpdb_centos6
      passed: [compile_gpdb_centos6]
    - get: gpdb6-centos6-test
  - in_parallel:
    - task: unit_tests_gpcloud
      file: gpdb_src/concourse/tasks/unit_tests_gpcloud.yml
      image: gpdb6-centos6-test
      params:
        TARGET_OS: centos
    - task: regression_tests_gpcloud_centos
      input_mapping:
        bin_gpdb: bin_gpdb_centos6
      file: gpdb_src/concourse/tasks/regression_tests_gpcloud.yml
      image: gpdb6-centos6-test
      params:
        gpcloud_access_key_id: {{gpcloud-access-key-id}}
        gpcloud_secret_access_key: {{gpcloud-secret-access-key}}
        TARGET_OS: centos
    - task: gpcheckcloud_tests_gpcloud_centos
      input_mapping:
        bin_gpdb: bin_gpdb_centos6
      file: gpdb_src/concourse/tasks/gpcheckcloud_tests_gpcloud.yml
      image: gpdb6-centos6-test
      params:
        gpcloud_access_key_id: {{gpcloud-access-key-id}}
        gpcloud_secret_access_key: {{gpcloud-secret-access-key}}
        TARGET_OS: centos
